// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pkg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RemindApiV1Client is the client API for RemindApiV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemindApiV1Client interface {
	CreateRemind(ctx context.Context, in *CreateRemindRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DescribeRemind(ctx context.Context, in *DescribeRemindRequest, opts ...grpc.CallOption) (*Remind, error)
	ListReminds(ctx context.Context, in *ListRemindsRequest, opts ...grpc.CallOption) (*ListRemindsResponse, error)
	RemoveRemind(ctx context.Context, in *RemoveRemindRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type remindApiV1Client struct {
	cc grpc.ClientConnInterface
}

func NewRemindApiV1Client(cc grpc.ClientConnInterface) RemindApiV1Client {
	return &remindApiV1Client{cc}
}

func (c *remindApiV1Client) CreateRemind(ctx context.Context, in *CreateRemindRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ocp.reminds.api.RemindApiV1/CreateRemind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remindApiV1Client) DescribeRemind(ctx context.Context, in *DescribeRemindRequest, opts ...grpc.CallOption) (*Remind, error) {
	out := new(Remind)
	err := c.cc.Invoke(ctx, "/ocp.reminds.api.RemindApiV1/DescribeRemind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remindApiV1Client) ListReminds(ctx context.Context, in *ListRemindsRequest, opts ...grpc.CallOption) (*ListRemindsResponse, error) {
	out := new(ListRemindsResponse)
	err := c.cc.Invoke(ctx, "/ocp.reminds.api.RemindApiV1/ListReminds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remindApiV1Client) RemoveRemind(ctx context.Context, in *RemoveRemindRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ocp.reminds.api.RemindApiV1/RemoveRemind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemindApiV1Server is the server API for RemindApiV1 service.
// All implementations must embed UnimplementedRemindApiV1Server
// for forward compatibility
type RemindApiV1Server interface {
	CreateRemind(context.Context, *CreateRemindRequest) (*emptypb.Empty, error)
	DescribeRemind(context.Context, *DescribeRemindRequest) (*Remind, error)
	ListReminds(context.Context, *ListRemindsRequest) (*ListRemindsResponse, error)
	RemoveRemind(context.Context, *RemoveRemindRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedRemindApiV1Server()
}

// UnimplementedRemindApiV1Server must be embedded to have forward compatible implementations.
type UnimplementedRemindApiV1Server struct {
}

func (UnimplementedRemindApiV1Server) CreateRemind(context.Context, *CreateRemindRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRemind not implemented")
}
func (UnimplementedRemindApiV1Server) DescribeRemind(context.Context, *DescribeRemindRequest) (*Remind, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeRemind not implemented")
}
func (UnimplementedRemindApiV1Server) ListReminds(context.Context, *ListRemindsRequest) (*ListRemindsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReminds not implemented")
}
func (UnimplementedRemindApiV1Server) RemoveRemind(context.Context, *RemoveRemindRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRemind not implemented")
}
func (UnimplementedRemindApiV1Server) mustEmbedUnimplementedRemindApiV1Server() {}

// UnsafeRemindApiV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemindApiV1Server will
// result in compilation errors.
type UnsafeRemindApiV1Server interface {
	mustEmbedUnimplementedRemindApiV1Server()
}

func RegisterRemindApiV1Server(s grpc.ServiceRegistrar, srv RemindApiV1Server) {
	s.RegisterService(&RemindApiV1_ServiceDesc, srv)
}

func _RemindApiV1_CreateRemind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRemindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemindApiV1Server).CreateRemind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.reminds.api.RemindApiV1/CreateRemind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemindApiV1Server).CreateRemind(ctx, req.(*CreateRemindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemindApiV1_DescribeRemind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRemindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemindApiV1Server).DescribeRemind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.reminds.api.RemindApiV1/DescribeRemind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemindApiV1Server).DescribeRemind(ctx, req.(*DescribeRemindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemindApiV1_ListReminds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRemindsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemindApiV1Server).ListReminds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.reminds.api.RemindApiV1/ListReminds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemindApiV1Server).ListReminds(ctx, req.(*ListRemindsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemindApiV1_RemoveRemind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRemindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemindApiV1Server).RemoveRemind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.reminds.api.RemindApiV1/RemoveRemind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemindApiV1Server).RemoveRemind(ctx, req.(*RemoveRemindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RemindApiV1_ServiceDesc is the grpc.ServiceDesc for RemindApiV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemindApiV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.reminds.api.RemindApiV1",
	HandlerType: (*RemindApiV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRemind",
			Handler:    _RemindApiV1_CreateRemind_Handler,
		},
		{
			MethodName: "DescribeRemind",
			Handler:    _RemindApiV1_DescribeRemind_Handler,
		},
		{
			MethodName: "ListReminds",
			Handler:    _RemindApiV1_ListReminds_Handler,
		},
		{
			MethodName: "RemoveRemind",
			Handler:    _RemindApiV1_RemoveRemind_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ocp-remind-api.proto",
}
